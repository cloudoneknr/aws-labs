pipeline {
    agent any
    parameters {
        choice(
            name: 'BUILD_TYPE',
            choices: ['plan', 'apply', 'destroy'],
            description: 'Select The Build Type'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['develepment', 'testing', 'production'],
            description: 'Select The Environment Type'
        )
     
    } 
    environment{
        AWS_DEFAULT_REGION='us-east-1'
        AWS_PROJECT_HOME='/Users/nrkodari/git-repos/aws-labs'
        C_PATH='/usr/local/bin'
    }
    stages {
        stage('Terraform Workspace') {
            steps {
                sh '''s
                    ${C_PATH}/terraform version
                    ${C_PATH}/tfenv list
                    ${C_PATH}/tfenv use 1.3.1
                    cd ${AWS_PROJECT_HOME}/networking/vpc
                    # set the desired workspace name
                    WORKSPACE_NAME=${ENVIRONMENT}
                    # check if the workspace already exists
                    if terraform workspace list | grep -q "${WORKSPACE_NAME}"; then
                    echo "Workspace ${WORKSPACE_NAME} already exists, selecting it"
                    terraform workspace select ${WORKSPACE_NAME}
                    else
                    echo "Workspace ${WORKSPACE_NAME} does not exist, creating it"
                    terraform workspace new ${WORKSPACE_NAME}
                    fi
                '''
            }
        }       
        stage('Terraform plan') {
            when {
                expression { params.BUILD_TYPE == 'plan' }
            }
            steps {
                sh '''
                    ${C_PATH}/terraform version
                    ${C_PATH}/tfenv list
                    ${C_PATH}/tfenv use 1.3.1
                    cd ${AWS_PROJECT_HOME}/networking/vpc
                    ${C_PATH}/terraform init
                    ${C_PATH}/terraform plan
                '''
            }
        }
        stage('Terraform apply') {
            when {
                expression { params.BUILD_TYPE == 'apply' }
            }
            steps {
                sh '''
                    ${C_PATH}/terraform version
                    ${C_PATH}/tfenv list
                    ${C_PATH}/tfenv use 1.3.1
                    cd ${AWS_PROJECT_HOME}/networking/vpc
                    ${C_PATH}/terraform init
                    ${C_PATH}/terraform apply -auto-approve
                '''
            }
        }
        stage('Terraform destroy') {
            when {
                expression { params.BUILD_TYPE == 'destroy' }
            }
            steps {
                sh '''
                    ${C_PATH}/terraform version
                    ${C_PATH}/tfenv list
                    ${C_PATH}/tfenv use 1.3.1
                    cd ${AWS_PROJECT_HOME}/networking/vpc
                    ${C_PATH}/terraform init
                    ${C_PATH}/terraform destroy -auto-approve
                '''
            }
        }
    }  
}
